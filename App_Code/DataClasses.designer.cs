#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="erpDBx")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAttendant(Attendant instance);
  partial void UpdateAttendant(Attendant instance);
  partial void DeleteAttendant(Attendant instance);
  partial void InsertWorkingPlan(WorkingPlan instance);
  partial void UpdateWorkingPlan(WorkingPlan instance);
  partial void DeleteWorkingPlan(WorkingPlan instance);
  partial void InsertBlog(Blog instance);
  partial void UpdateBlog(Blog instance);
  partial void DeleteBlog(Blog instance);
  partial void InsertCompany(Company instance);
  partial void UpdateCompany(Company instance);
  partial void DeleteCompany(Company instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertOffice(Office instance);
  partial void UpdateOffice(Office instance);
  partial void DeleteOffice(Office instance);
  partial void InsertProject(Project instance);
  partial void UpdateProject(Project instance);
  partial void DeleteProject(Project instance);
  partial void InsertTask(Task instance);
  partial void UpdateTask(Task instance);
  partial void DeleteTask(Task instance);
  partial void InsertTaskComment(TaskComment instance);
  partial void UpdateTaskComment(TaskComment instance);
  partial void DeleteTaskComment(TaskComment instance);
  partial void InsertWorkingLocation(WorkingLocation instance);
  partial void UpdateWorkingLocation(WorkingLocation instance);
  partial void DeleteWorkingLocation(WorkingLocation instance);
  partial void InsertBlogComment(BlogComment instance);
  partial void UpdateBlogComment(BlogComment instance);
  partial void DeleteBlogComment(BlogComment instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["erpDBxConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Attendant> Attendants
	{
		get
		{
			return this.GetTable<Attendant>();
		}
	}
	
	public System.Data.Linq.Table<WorkingPlan> WorkingPlans
	{
		get
		{
			return this.GetTable<WorkingPlan>();
		}
	}
	
	public System.Data.Linq.Table<Blog> Blogs
	{
		get
		{
			return this.GetTable<Blog>();
		}
	}
	
	public System.Data.Linq.Table<Company> Companies
	{
		get
		{
			return this.GetTable<Company>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<Office> Offices
	{
		get
		{
			return this.GetTable<Office>();
		}
	}
	
	public System.Data.Linq.Table<Project> Projects
	{
		get
		{
			return this.GetTable<Project>();
		}
	}
	
	public System.Data.Linq.Table<Task> Tasks
	{
		get
		{
			return this.GetTable<Task>();
		}
	}
	
	public System.Data.Linq.Table<TaskComment> TaskComments
	{
		get
		{
			return this.GetTable<TaskComment>();
		}
	}
	
	public System.Data.Linq.Table<WorkingLocation> WorkingLocations
	{
		get
		{
			return this.GetTable<WorkingLocation>();
		}
	}
	
	public System.Data.Linq.Table<BlogComment> BlogComments
	{
		get
		{
			return this.GetTable<BlogComment>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendant")]
public partial class Attendant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _AttendantId;
	
	private System.Nullable<long> _EmployeeId;
	
	private System.Nullable<long> _WorkingLocationId;
	
	private System.Nullable<System.DateTime> _CheckinTime;
	
	private System.Nullable<System.DateTime> _CheckoutTime;
	
	private string _PhotoURL;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<int> _WorkingDate;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<WorkingLocation> _WorkingLocation;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendantIdChanging(long value);
    partial void OnAttendantIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<long> value);
    partial void OnEmployeeIdChanged();
    partial void OnWorkingLocationIdChanging(System.Nullable<long> value);
    partial void OnWorkingLocationIdChanged();
    partial void OnCheckinTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckinTimeChanged();
    partial void OnCheckoutTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckoutTimeChanged();
    partial void OnPhotoURLChanging(string value);
    partial void OnPhotoURLChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnWorkingDateChanging(System.Nullable<int> value);
    partial void OnWorkingDateChanged();
    #endregion
	
	public Attendant()
	{
		this._Employee = default(EntityRef<Employee>);
		this._WorkingLocation = default(EntityRef<WorkingLocation>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendantId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long AttendantId
	{
		get
		{
			return this._AttendantId;
		}
		set
		{
			if ((this._AttendantId != value))
			{
				this.OnAttendantIdChanging(value);
				this.SendPropertyChanging();
				this._AttendantId = value;
				this.SendPropertyChanged("AttendantId");
				this.OnAttendantIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="BigInt")]
	public System.Nullable<long> EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingLocationId", DbType="BigInt")]
	public System.Nullable<long> WorkingLocationId
	{
		get
		{
			return this._WorkingLocationId;
		}
		set
		{
			if ((this._WorkingLocationId != value))
			{
				if (this._WorkingLocation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWorkingLocationIdChanging(value);
				this.SendPropertyChanging();
				this._WorkingLocationId = value;
				this.SendPropertyChanged("WorkingLocationId");
				this.OnWorkingLocationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckinTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> CheckinTime
	{
		get
		{
			return this._CheckinTime;
		}
		set
		{
			if ((this._CheckinTime != value))
			{
				this.OnCheckinTimeChanging(value);
				this.SendPropertyChanging();
				this._CheckinTime = value;
				this.SendPropertyChanged("CheckinTime");
				this.OnCheckinTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckoutTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> CheckoutTime
	{
		get
		{
			return this._CheckoutTime;
		}
		set
		{
			if ((this._CheckoutTime != value))
			{
				this.OnCheckoutTimeChanging(value);
				this.SendPropertyChanging();
				this._CheckoutTime = value;
				this.SendPropertyChanged("CheckoutTime");
				this.OnCheckoutTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoURL", DbType="NVarChar(300)")]
	public string PhotoURL
	{
		get
		{
			return this._PhotoURL;
		}
		set
		{
			if ((this._PhotoURL != value))
			{
				this.OnPhotoURLChanging(value);
				this.SendPropertyChanging();
				this._PhotoURL = value;
				this.SendPropertyChanged("PhotoURL");
				this.OnPhotoURLChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingDate", DbType="Int")]
	public System.Nullable<int> WorkingDate
	{
		get
		{
			return this._WorkingDate;
		}
		set
		{
			if ((this._WorkingDate != value))
			{
				this.OnWorkingDateChanging(value);
				this.SendPropertyChanging();
				this._WorkingDate = value;
				this.SendPropertyChanged("WorkingDate");
				this.OnWorkingDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Attendant", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Attendants.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Attendants.Add(this);
					this._EmployeeId = value.EmployeeId;
				}
				else
				{
					this._EmployeeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkingLocation_Attendant", Storage="_WorkingLocation", ThisKey="WorkingLocationId", OtherKey="WorkingLocationId", IsForeignKey=true)]
	public WorkingLocation WorkingLocation
	{
		get
		{
			return this._WorkingLocation.Entity;
		}
		set
		{
			WorkingLocation previousValue = this._WorkingLocation.Entity;
			if (((previousValue != value) 
						|| (this._WorkingLocation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkingLocation.Entity = null;
					previousValue.Attendants.Remove(this);
				}
				this._WorkingLocation.Entity = value;
				if ((value != null))
				{
					value.Attendants.Add(this);
					this._WorkingLocationId = value.WorkingLocationId;
				}
				else
				{
					this._WorkingLocationId = default(Nullable<long>);
				}
				this.SendPropertyChanged("WorkingLocation");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingPlan")]
public partial class WorkingPlan : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _WorkingPlanId;
	
	private System.Nullable<long> _TaskId;
	
	private System.Nullable<long> _EmployeeId;
	
	private System.Nullable<int> _Status;
	
	private string _Note;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Task> _Task;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkingPlanIdChanging(long value);
    partial void OnWorkingPlanIdChanged();
    partial void OnTaskIdChanging(System.Nullable<long> value);
    partial void OnTaskIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<long> value);
    partial void OnEmployeeIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
	
	public WorkingPlan()
	{
		this._Employee = default(EntityRef<Employee>);
		this._Task = default(EntityRef<Task>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingPlanId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long WorkingPlanId
	{
		get
		{
			return this._WorkingPlanId;
		}
		set
		{
			if ((this._WorkingPlanId != value))
			{
				this.OnWorkingPlanIdChanging(value);
				this.SendPropertyChanging();
				this._WorkingPlanId = value;
				this.SendPropertyChanged("WorkingPlanId");
				this.OnWorkingPlanIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="BigInt")]
	public System.Nullable<long> TaskId
	{
		get
		{
			return this._TaskId;
		}
		set
		{
			if ((this._TaskId != value))
			{
				if (this._Task.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTaskIdChanging(value);
				this.SendPropertyChanging();
				this._TaskId = value;
				this.SendPropertyChanged("TaskId");
				this.OnTaskIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="BigInt")]
	public System.Nullable<long> EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(500)")]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkingPlan", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.WorkingPlans.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.WorkingPlans.Add(this);
					this._EmployeeId = value.EmployeeId;
				}
				else
				{
					this._EmployeeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_WorkingPlan", Storage="_Task", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
	public Task Task
	{
		get
		{
			return this._Task.Entity;
		}
		set
		{
			Task previousValue = this._Task.Entity;
			if (((previousValue != value) 
						|| (this._Task.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Task.Entity = null;
					previousValue.WorkingPlans.Remove(this);
				}
				this._Task.Entity = value;
				if ((value != null))
				{
					value.WorkingPlans.Add(this);
					this._TaskId = value.TaskId;
				}
				else
				{
					this._TaskId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Task");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blog")]
public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _BlogId;
	
	private string _BlogTitle;
	
	private string _BlogDesc;
	
	private string _BlogContent;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<long> _CompanyId;
	
	private System.Nullable<long> _CreatedByEmployeeId;
	
	private EntitySet<BlogComment> _BlogComments;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogIdChanging(long value);
    partial void OnBlogIdChanged();
    partial void OnBlogTitleChanging(string value);
    partial void OnBlogTitleChanged();
    partial void OnBlogDescChanging(string value);
    partial void OnBlogDescChanged();
    partial void OnBlogContentChanging(string value);
    partial void OnBlogContentChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnCreatedByEmployeeIdChanging(System.Nullable<long> value);
    partial void OnCreatedByEmployeeIdChanged();
    #endregion
	
	public Blog()
	{
		this._BlogComments = new EntitySet<BlogComment>(new Action<BlogComment>(this.attach_BlogComments), new Action<BlogComment>(this.detach_BlogComments));
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long BlogId
	{
		get
		{
			return this._BlogId;
		}
		set
		{
			if ((this._BlogId != value))
			{
				this.OnBlogIdChanging(value);
				this.SendPropertyChanging();
				this._BlogId = value;
				this.SendPropertyChanged("BlogId");
				this.OnBlogIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogTitle", DbType="NVarChar(120)")]
	public string BlogTitle
	{
		get
		{
			return this._BlogTitle;
		}
		set
		{
			if ((this._BlogTitle != value))
			{
				this.OnBlogTitleChanging(value);
				this.SendPropertyChanging();
				this._BlogTitle = value;
				this.SendPropertyChanged("BlogTitle");
				this.OnBlogTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogDesc", DbType="NVarChar(500)")]
	public string BlogDesc
	{
		get
		{
			return this._BlogDesc;
		}
		set
		{
			if ((this._BlogDesc != value))
			{
				this.OnBlogDescChanging(value);
				this.SendPropertyChanging();
				this._BlogDesc = value;
				this.SendPropertyChanged("BlogDesc");
				this.OnBlogDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogContent", DbType="NVarChar(MAX)")]
	public string BlogContent
	{
		get
		{
			return this._BlogContent;
		}
		set
		{
			if ((this._BlogContent != value))
			{
				this.OnBlogContentChanging(value);
				this.SendPropertyChanging();
				this._BlogContent = value;
				this.SendPropertyChanged("BlogContent");
				this.OnBlogContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
	public System.Nullable<long> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByEmployeeId", DbType="BigInt")]
	public System.Nullable<long> CreatedByEmployeeId
	{
		get
		{
			return this._CreatedByEmployeeId;
		}
		set
		{
			if ((this._CreatedByEmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._CreatedByEmployeeId = value;
				this.SendPropertyChanged("CreatedByEmployeeId");
				this.OnCreatedByEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogComment", Storage="_BlogComments", ThisKey="BlogId", OtherKey="BlogId")]
	public EntitySet<BlogComment> BlogComments
	{
		get
		{
			return this._BlogComments;
		}
		set
		{
			this._BlogComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Blog", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Blogs.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Blogs.Add(this);
					this._CompanyId = value.CompanyId;
				}
				else
				{
					this._CompanyId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Blog", Storage="_Employee", ThisKey="CreatedByEmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Blogs.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Blogs.Add(this);
					this._CreatedByEmployeeId = value.EmployeeId;
				}
				else
				{
					this._CreatedByEmployeeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Blog = this;
	}
	
	private void detach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Blog = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _CompanyId;
	
	private string _CompanyName;
	
	private string _CompanyDescription;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private EntitySet<Blog> _Blogs;
	
	private EntitySet<Department> _Departments;
	
	private EntitySet<Office> _Offices;
	
	private EntitySet<Project> _Projects;
	
	private EntitySet<WorkingLocation> _WorkingLocations;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(long value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCompanyDescriptionChanging(string value);
    partial void OnCompanyDescriptionChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public Company()
	{
		this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
		this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
		this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		this._WorkingLocations = new EntitySet<WorkingLocation>(new Action<WorkingLocation>(this.attach_WorkingLocations), new Action<WorkingLocation>(this.detach_WorkingLocations));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
	public string CompanyName
	{
		get
		{
			return this._CompanyName;
		}
		set
		{
			if ((this._CompanyName != value))
			{
				this.OnCompanyNameChanging(value);
				this.SendPropertyChanging();
				this._CompanyName = value;
				this.SendPropertyChanged("CompanyName");
				this.OnCompanyNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyDescription", DbType="NVarChar(MAX)")]
	public string CompanyDescription
	{
		get
		{
			return this._CompanyDescription;
		}
		set
		{
			if ((this._CompanyDescription != value))
			{
				this.OnCompanyDescriptionChanging(value);
				this.SendPropertyChanging();
				this._CompanyDescription = value;
				this.SendPropertyChanged("CompanyDescription");
				this.OnCompanyDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Blog", Storage="_Blogs", ThisKey="CompanyId", OtherKey="CompanyId")]
	public EntitySet<Blog> Blogs
	{
		get
		{
			return this._Blogs;
		}
		set
		{
			this._Blogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Departments", ThisKey="CompanyId", OtherKey="CompanyId")]
	public EntitySet<Department> Departments
	{
		get
		{
			return this._Departments;
		}
		set
		{
			this._Departments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Office", Storage="_Offices", ThisKey="CompanyId", OtherKey="CompanyId")]
	public EntitySet<Office> Offices
	{
		get
		{
			return this._Offices;
		}
		set
		{
			this._Offices.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Project", Storage="_Projects", ThisKey="CompanyId", OtherKey="CompanyId")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkingLocation", Storage="_WorkingLocations", ThisKey="CompanyId", OtherKey="CompanyId")]
	public EntitySet<WorkingLocation> WorkingLocations
	{
		get
		{
			return this._WorkingLocations;
		}
		set
		{
			this._WorkingLocations.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Blogs(Blog entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Blogs(Blog entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Offices(Office entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Offices(Office entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
	
	private void attach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Company = this;
	}
	
	private void detach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Company = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentId;
	
	private string _DeparmentName;
	
	private string _DepartmentDesc;
	
	private System.Nullable<long> _OfficeId;
	
	private System.Nullable<long> _CompanyId;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<int> _CurrentEmployee;
	
	private System.Nullable<long> _ManagerId;
	
	private EntitySet<WorkingLocation> _WorkingLocations;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Office> _Office;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDeparmentNameChanging(string value);
    partial void OnDeparmentNameChanged();
    partial void OnDepartmentDescChanging(string value);
    partial void OnDepartmentDescChanged();
    partial void OnOfficeIdChanging(System.Nullable<long> value);
    partial void OnOfficeIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCurrentEmployeeChanging(System.Nullable<int> value);
    partial void OnCurrentEmployeeChanged();
    partial void OnManagerIdChanging(System.Nullable<long> value);
    partial void OnManagerIdChanged();
    #endregion
	
	public Department()
	{
		this._WorkingLocations = new EntitySet<WorkingLocation>(new Action<WorkingLocation>(this.attach_WorkingLocations), new Action<WorkingLocation>(this.detach_WorkingLocations));
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		this._Office = default(EntityRef<Office>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DepartmentId
	{
		get
		{
			return this._DepartmentId;
		}
		set
		{
			if ((this._DepartmentId != value))
			{
				this.OnDepartmentIdChanging(value);
				this.SendPropertyChanging();
				this._DepartmentId = value;
				this.SendPropertyChanged("DepartmentId");
				this.OnDepartmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeparmentName", DbType="NVarChar(100)")]
	public string DeparmentName
	{
		get
		{
			return this._DeparmentName;
		}
		set
		{
			if ((this._DeparmentName != value))
			{
				this.OnDeparmentNameChanging(value);
				this.SendPropertyChanging();
				this._DeparmentName = value;
				this.SendPropertyChanged("DeparmentName");
				this.OnDeparmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentDesc", DbType="NVarChar(MAX)")]
	public string DepartmentDesc
	{
		get
		{
			return this._DepartmentDesc;
		}
		set
		{
			if ((this._DepartmentDesc != value))
			{
				this.OnDepartmentDescChanging(value);
				this.SendPropertyChanging();
				this._DepartmentDesc = value;
				this.SendPropertyChanged("DepartmentDesc");
				this.OnDepartmentDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeId", DbType="BigInt")]
	public System.Nullable<long> OfficeId
	{
		get
		{
			return this._OfficeId;
		}
		set
		{
			if ((this._OfficeId != value))
			{
				if (this._Office.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOfficeIdChanging(value);
				this.SendPropertyChanging();
				this._OfficeId = value;
				this.SendPropertyChanged("OfficeId");
				this.OnOfficeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
	public System.Nullable<long> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentEmployee", DbType="Int")]
	public System.Nullable<int> CurrentEmployee
	{
		get
		{
			return this._CurrentEmployee;
		}
		set
		{
			if ((this._CurrentEmployee != value))
			{
				this.OnCurrentEmployeeChanging(value);
				this.SendPropertyChanging();
				this._CurrentEmployee = value;
				this.SendPropertyChanged("CurrentEmployee");
				this.OnCurrentEmployeeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="BigInt")]
	public System.Nullable<long> ManagerId
	{
		get
		{
			return this._ManagerId;
		}
		set
		{
			if ((this._ManagerId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnManagerIdChanging(value);
				this.SendPropertyChanging();
				this._ManagerId = value;
				this.SendPropertyChanged("ManagerId");
				this.OnManagerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_WorkingLocation", Storage="_WorkingLocations", ThisKey="DepartmentId", OtherKey="DepartmentId")]
	public EntitySet<WorkingLocation> WorkingLocations
	{
		get
		{
			return this._WorkingLocations;
		}
		set
		{
			this._WorkingLocations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Departments.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Departments.Add(this);
					this._CompanyId = value.CompanyId;
				}
				else
				{
					this._CompanyId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Employee", ThisKey="ManagerId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Departments.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Departments.Add(this);
					this._ManagerId = value.EmployeeId;
				}
				else
				{
					this._ManagerId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Department", Storage="_Office", ThisKey="OfficeId", OtherKey="OfficeId", IsForeignKey=true)]
	public Office Office
	{
		get
		{
			return this._Office.Entity;
		}
		set
		{
			Office previousValue = this._Office.Entity;
			if (((previousValue != value) 
						|| (this._Office.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Office.Entity = null;
					previousValue.Departments.Remove(this);
				}
				this._Office.Entity = value;
				if ((value != null))
				{
					value.Departments.Add(this);
					this._OfficeId = value.OfficeId;
				}
				else
				{
					this._OfficeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Office");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _EmployeeId;
	
	private string _EmployeeCode;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Email;
	
	private string _Address;
	
	private string _Phone;
	
	private string _Position;
	
	private System.Nullable<long> _ManagerId;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<decimal> _BasicSalary;
	
	private System.Nullable<decimal> _KPISalary;
	
	private EntitySet<Attendant> _Attendants;
	
	private EntitySet<WorkingPlan> _WorkingPlans;
	
	private EntitySet<Blog> _Blogs;
	
	private EntitySet<Department> _Departments;
	
	private EntitySet<Project> _Projects;
	
	private EntitySet<Task> _Tasks;
	
	private EntitySet<TaskComment> _TaskComments;
	
	private EntitySet<WorkingLocation> _WorkingLocations;
	
	private EntitySet<BlogComment> _BlogComments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIdChanging(long value);
    partial void OnEmployeeIdChanged();
    partial void OnEmployeeCodeChanging(string value);
    partial void OnEmployeeCodeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnManagerIdChanging(System.Nullable<long> value);
    partial void OnManagerIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnBasicSalaryChanging(System.Nullable<decimal> value);
    partial void OnBasicSalaryChanged();
    partial void OnKPISalaryChanging(System.Nullable<decimal> value);
    partial void OnKPISalaryChanged();
    #endregion
	
	public Employee()
	{
		this._Attendants = new EntitySet<Attendant>(new Action<Attendant>(this.attach_Attendants), new Action<Attendant>(this.detach_Attendants));
		this._WorkingPlans = new EntitySet<WorkingPlan>(new Action<WorkingPlan>(this.attach_WorkingPlans), new Action<WorkingPlan>(this.detach_WorkingPlans));
		this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
		this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
		this._TaskComments = new EntitySet<TaskComment>(new Action<TaskComment>(this.attach_TaskComments), new Action<TaskComment>(this.detach_TaskComments));
		this._WorkingLocations = new EntitySet<WorkingLocation>(new Action<WorkingLocation>(this.attach_WorkingLocations), new Action<WorkingLocation>(this.detach_WorkingLocations));
		this._BlogComments = new EntitySet<BlogComment>(new Action<BlogComment>(this.attach_BlogComments), new Action<BlogComment>(this.detach_BlogComments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeCode", DbType="NVarChar(50)")]
	public string EmployeeCode
	{
		get
		{
			return this._EmployeeCode;
		}
		set
		{
			if ((this._EmployeeCode != value))
			{
				this.OnEmployeeCodeChanging(value);
				this.SendPropertyChanging();
				this._EmployeeCode = value;
				this.SendPropertyChanged("EmployeeCode");
				this.OnEmployeeCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(120)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(120)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
	public string Position
	{
		get
		{
			return this._Position;
		}
		set
		{
			if ((this._Position != value))
			{
				this.OnPositionChanging(value);
				this.SendPropertyChanging();
				this._Position = value;
				this.SendPropertyChanged("Position");
				this.OnPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="BigInt")]
	public System.Nullable<long> ManagerId
	{
		get
		{
			return this._ManagerId;
		}
		set
		{
			if ((this._ManagerId != value))
			{
				this.OnManagerIdChanging(value);
				this.SendPropertyChanging();
				this._ManagerId = value;
				this.SendPropertyChanged("ManagerId");
				this.OnManagerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> BasicSalary
	{
		get
		{
			return this._BasicSalary;
		}
		set
		{
			if ((this._BasicSalary != value))
			{
				this.OnBasicSalaryChanging(value);
				this.SendPropertyChanging();
				this._BasicSalary = value;
				this.SendPropertyChanged("BasicSalary");
				this.OnBasicSalaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KPISalary", DbType="Decimal(18,2)")]
	public System.Nullable<decimal> KPISalary
	{
		get
		{
			return this._KPISalary;
		}
		set
		{
			if ((this._KPISalary != value))
			{
				this.OnKPISalaryChanging(value);
				this.SendPropertyChanging();
				this._KPISalary = value;
				this.SendPropertyChanged("KPISalary");
				this.OnKPISalaryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Attendant", Storage="_Attendants", ThisKey="EmployeeId", OtherKey="EmployeeId")]
	public EntitySet<Attendant> Attendants
	{
		get
		{
			return this._Attendants;
		}
		set
		{
			this._Attendants.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkingPlan", Storage="_WorkingPlans", ThisKey="EmployeeId", OtherKey="EmployeeId")]
	public EntitySet<WorkingPlan> WorkingPlans
	{
		get
		{
			return this._WorkingPlans;
		}
		set
		{
			this._WorkingPlans.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Blog", Storage="_Blogs", ThisKey="EmployeeId", OtherKey="CreatedByEmployeeId")]
	public EntitySet<Blog> Blogs
	{
		get
		{
			return this._Blogs;
		}
		set
		{
			this._Blogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Departments", ThisKey="EmployeeId", OtherKey="ManagerId")]
	public EntitySet<Department> Departments
	{
		get
		{
			return this._Departments;
		}
		set
		{
			this._Departments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Projects", ThisKey="EmployeeId", OtherKey="ManagerId")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Task", Storage="_Tasks", ThisKey="EmployeeId", OtherKey="CreatedByEmpId")]
	public EntitySet<Task> Tasks
	{
		get
		{
			return this._Tasks;
		}
		set
		{
			this._Tasks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TaskComment", Storage="_TaskComments", ThisKey="EmployeeId", OtherKey="EmployeeId")]
	public EntitySet<TaskComment> TaskComments
	{
		get
		{
			return this._TaskComments;
		}
		set
		{
			this._TaskComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkingLocation", Storage="_WorkingLocations", ThisKey="EmployeeId", OtherKey="EmployeeId")]
	public EntitySet<WorkingLocation> WorkingLocations
	{
		get
		{
			return this._WorkingLocations;
		}
		set
		{
			this._WorkingLocations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BlogComment", Storage="_BlogComments", ThisKey="EmployeeId", OtherKey="EmployeeId")]
	public EntitySet<BlogComment> BlogComments
	{
		get
		{
			return this._BlogComments;
		}
		set
		{
			this._BlogComments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Attendants(Attendant entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Attendants(Attendant entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_WorkingPlans(WorkingPlan entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_WorkingPlans(WorkingPlan entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Blogs(Blog entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Blogs(Blog entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_Tasks(Task entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_Tasks(Task entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_WorkingLocations(WorkingLocation entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
	
	private void attach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_BlogComments(BlogComment entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Office")]
public partial class Office : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _OfficeId;
	
	private System.Nullable<long> _CompanyId;
	
	private string _OfficeName;
	
	private string _OfficeAddress;
	
	private string _Phone;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<int> _Status;
	
	private EntitySet<Department> _Departments;
	
	private EntityRef<Company> _Company;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfficeIdChanging(long value);
    partial void OnOfficeIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnOfficeNameChanging(string value);
    partial void OnOfficeNameChanged();
    partial void OnOfficeAddressChanging(string value);
    partial void OnOfficeAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
	
	public Office()
	{
		this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
		this._Company = default(EntityRef<Company>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long OfficeId
	{
		get
		{
			return this._OfficeId;
		}
		set
		{
			if ((this._OfficeId != value))
			{
				this.OnOfficeIdChanging(value);
				this.SendPropertyChanging();
				this._OfficeId = value;
				this.SendPropertyChanged("OfficeId");
				this.OnOfficeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
	public System.Nullable<long> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeName", DbType="NVarChar(100)")]
	public string OfficeName
	{
		get
		{
			return this._OfficeName;
		}
		set
		{
			if ((this._OfficeName != value))
			{
				this.OnOfficeNameChanging(value);
				this.SendPropertyChanging();
				this._OfficeName = value;
				this.SendPropertyChanged("OfficeName");
				this.OnOfficeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeAddress", DbType="NVarChar(200)")]
	public string OfficeAddress
	{
		get
		{
			return this._OfficeAddress;
		}
		set
		{
			if ((this._OfficeAddress != value))
			{
				this.OnOfficeAddressChanging(value);
				this.SendPropertyChanging();
				this._OfficeAddress = value;
				this.SendPropertyChanged("OfficeAddress");
				this.OnOfficeAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Department", Storage="_Departments", ThisKey="OfficeId", OtherKey="OfficeId")]
	public EntitySet<Department> Departments
	{
		get
		{
			return this._Departments;
		}
		set
		{
			this._Departments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Office", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Offices.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Offices.Add(this);
					this._CompanyId = value.CompanyId;
				}
				else
				{
					this._CompanyId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Office = this;
	}
	
	private void detach_Departments(Department entity)
	{
		this.SendPropertyChanging();
		entity.Office = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ProjectId;
	
	private string _ProjectTitle;
	
	private string _ProjectDesc;
	
	private string _ProjectContent;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<long> _ManagerId;
	
	private System.Nullable<long> _CompanyId;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<System.DateTime> _StartTime;
	
	private System.Nullable<System.DateTime> _FinishTime;
	
	private EntitySet<Task> _Tasks;
	
	private EntitySet<TaskComment> _TaskComments;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnProjectTitleChanging(string value);
    partial void OnProjectTitleChanged();
    partial void OnProjectDescChanging(string value);
    partial void OnProjectDescChanged();
    partial void OnProjectContentChanging(string value);
    partial void OnProjectContentChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnManagerIdChanging(System.Nullable<long> value);
    partial void OnManagerIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnFinishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishTimeChanged();
    #endregion
	
	public Project()
	{
		this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
		this._TaskComments = new EntitySet<TaskComment>(new Action<TaskComment>(this.attach_TaskComments), new Action<TaskComment>(this.detach_TaskComments));
		this._Company = default(EntityRef<Company>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ProjectId
	{
		get
		{
			return this._ProjectId;
		}
		set
		{
			if ((this._ProjectId != value))
			{
				this.OnProjectIdChanging(value);
				this.SendPropertyChanging();
				this._ProjectId = value;
				this.SendPropertyChanged("ProjectId");
				this.OnProjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTitle", DbType="NVarChar(150)")]
	public string ProjectTitle
	{
		get
		{
			return this._ProjectTitle;
		}
		set
		{
			if ((this._ProjectTitle != value))
			{
				this.OnProjectTitleChanging(value);
				this.SendPropertyChanging();
				this._ProjectTitle = value;
				this.SendPropertyChanged("ProjectTitle");
				this.OnProjectTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDesc", DbType="NVarChar(500)")]
	public string ProjectDesc
	{
		get
		{
			return this._ProjectDesc;
		}
		set
		{
			if ((this._ProjectDesc != value))
			{
				this.OnProjectDescChanging(value);
				this.SendPropertyChanging();
				this._ProjectDesc = value;
				this.SendPropertyChanged("ProjectDesc");
				this.OnProjectDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectContent", DbType="NVarChar(MAX)")]
	public string ProjectContent
	{
		get
		{
			return this._ProjectContent;
		}
		set
		{
			if ((this._ProjectContent != value))
			{
				this.OnProjectContentChanging(value);
				this.SendPropertyChanging();
				this._ProjectContent = value;
				this.SendPropertyChanged("ProjectContent");
				this.OnProjectContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="BigInt")]
	public System.Nullable<long> ManagerId
	{
		get
		{
			return this._ManagerId;
		}
		set
		{
			if ((this._ManagerId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnManagerIdChanging(value);
				this.SendPropertyChanging();
				this._ManagerId = value;
				this.SendPropertyChanged("ManagerId");
				this.OnManagerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
	public System.Nullable<long> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> FinishTime
	{
		get
		{
			return this._FinishTime;
		}
		set
		{
			if ((this._FinishTime != value))
			{
				this.OnFinishTimeChanging(value);
				this.SendPropertyChanging();
				this._FinishTime = value;
				this.SendPropertyChanged("FinishTime");
				this.OnFinishTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Tasks", ThisKey="ProjectId", OtherKey="ProjectId")]
	public EntitySet<Task> Tasks
	{
		get
		{
			return this._Tasks;
		}
		set
		{
			this._Tasks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskComment", Storage="_TaskComments", ThisKey="ProjectId", OtherKey="ProjectId")]
	public EntitySet<TaskComment> TaskComments
	{
		get
		{
			return this._TaskComments;
		}
		set
		{
			this._TaskComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Project", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._CompanyId = value.CompanyId;
				}
				else
				{
					this._CompanyId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Project", Storage="_Employee", ThisKey="ManagerId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._ManagerId = value.EmployeeId;
				}
				else
				{
					this._ManagerId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Tasks(Task entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_Tasks(Task entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
	
	private void attach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _TaskId;
	
	private System.Nullable<long> _ProjectId;
	
	private string _TaskName;
	
	private string _TaskDesc;
	
	private string _TaskContent;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<System.DateTime> _StartTime;
	
	private System.Nullable<System.DateTime> _FinishTime;
	
	private System.Nullable<System.DateTime> _EndTime;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<long> _CreatedByEmpId;
	
	private EntitySet<WorkingPlan> _WorkingPlans;
	
	private EntitySet<TaskComment> _TaskComments;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Project> _Project;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIdChanging(long value);
    partial void OnTaskIdChanged();
    partial void OnProjectIdChanging(System.Nullable<long> value);
    partial void OnProjectIdChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnTaskDescChanging(string value);
    partial void OnTaskDescChanged();
    partial void OnTaskContentChanging(string value);
    partial void OnTaskContentChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnFinishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnCreatedByEmpIdChanging(System.Nullable<long> value);
    partial void OnCreatedByEmpIdChanged();
    #endregion
	
	public Task()
	{
		this._WorkingPlans = new EntitySet<WorkingPlan>(new Action<WorkingPlan>(this.attach_WorkingPlans), new Action<WorkingPlan>(this.detach_WorkingPlans));
		this._TaskComments = new EntitySet<TaskComment>(new Action<TaskComment>(this.attach_TaskComments), new Action<TaskComment>(this.detach_TaskComments));
		this._Employee = default(EntityRef<Employee>);
		this._Project = default(EntityRef<Project>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long TaskId
	{
		get
		{
			return this._TaskId;
		}
		set
		{
			if ((this._TaskId != value))
			{
				this.OnTaskIdChanging(value);
				this.SendPropertyChanging();
				this._TaskId = value;
				this.SendPropertyChanged("TaskId");
				this.OnTaskIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt")]
	public System.Nullable<long> ProjectId
	{
		get
		{
			return this._ProjectId;
		}
		set
		{
			if ((this._ProjectId != value))
			{
				if (this._Project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProjectIdChanging(value);
				this.SendPropertyChanging();
				this._ProjectId = value;
				this.SendPropertyChanged("ProjectId");
				this.OnProjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="NVarChar(150)")]
	public string TaskName
	{
		get
		{
			return this._TaskName;
		}
		set
		{
			if ((this._TaskName != value))
			{
				this.OnTaskNameChanging(value);
				this.SendPropertyChanging();
				this._TaskName = value;
				this.SendPropertyChanged("TaskName");
				this.OnTaskNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskDesc", DbType="NVarChar(500)")]
	public string TaskDesc
	{
		get
		{
			return this._TaskDesc;
		}
		set
		{
			if ((this._TaskDesc != value))
			{
				this.OnTaskDescChanging(value);
				this.SendPropertyChanging();
				this._TaskDesc = value;
				this.SendPropertyChanged("TaskDesc");
				this.OnTaskDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskContent", DbType="NVarChar(MAX)")]
	public string TaskContent
	{
		get
		{
			return this._TaskContent;
		}
		set
		{
			if ((this._TaskContent != value))
			{
				this.OnTaskContentChanging(value);
				this.SendPropertyChanging();
				this._TaskContent = value;
				this.SendPropertyChanged("TaskContent");
				this.OnTaskContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartTime
	{
		get
		{
			return this._StartTime;
		}
		set
		{
			if ((this._StartTime != value))
			{
				this.OnStartTimeChanging(value);
				this.SendPropertyChanging();
				this._StartTime = value;
				this.SendPropertyChanged("StartTime");
				this.OnStartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> FinishTime
	{
		get
		{
			return this._FinishTime;
		}
		set
		{
			if ((this._FinishTime != value))
			{
				this.OnFinishTimeChanging(value);
				this.SendPropertyChanging();
				this._FinishTime = value;
				this.SendPropertyChanged("FinishTime");
				this.OnFinishTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> EndTime
	{
		get
		{
			return this._EndTime;
		}
		set
		{
			if ((this._EndTime != value))
			{
				this.OnEndTimeChanging(value);
				this.SendPropertyChanging();
				this._EndTime = value;
				this.SendPropertyChanged("EndTime");
				this.OnEndTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByEmpId", DbType="BigInt")]
	public System.Nullable<long> CreatedByEmpId
	{
		get
		{
			return this._CreatedByEmpId;
		}
		set
		{
			if ((this._CreatedByEmpId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByEmpIdChanging(value);
				this.SendPropertyChanging();
				this._CreatedByEmpId = value;
				this.SendPropertyChanged("CreatedByEmpId");
				this.OnCreatedByEmpIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_WorkingPlan", Storage="_WorkingPlans", ThisKey="TaskId", OtherKey="TaskId")]
	public EntitySet<WorkingPlan> WorkingPlans
	{
		get
		{
			return this._WorkingPlans;
		}
		set
		{
			this._WorkingPlans.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskComment", Storage="_TaskComments", ThisKey="TaskId", OtherKey="TaskId")]
	public EntitySet<TaskComment> TaskComments
	{
		get
		{
			return this._TaskComments;
		}
		set
		{
			this._TaskComments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Task", Storage="_Employee", ThisKey="CreatedByEmpId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.Tasks.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.Tasks.Add(this);
					this._CreatedByEmpId = value.EmployeeId;
				}
				else
				{
					this._CreatedByEmpId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Task", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.Tasks.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.Tasks.Add(this);
					this._ProjectId = value.ProjectId;
				}
				else
				{
					this._ProjectId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WorkingPlans(WorkingPlan entity)
	{
		this.SendPropertyChanging();
		entity.Task = this;
	}
	
	private void detach_WorkingPlans(WorkingPlan entity)
	{
		this.SendPropertyChanging();
		entity.Task = null;
	}
	
	private void attach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Task = this;
	}
	
	private void detach_TaskComments(TaskComment entity)
	{
		this.SendPropertyChanging();
		entity.Task = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskComment")]
public partial class TaskComment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _TaskCommentId;
	
	private string _CommentTitle;
	
	private string _CommentNote;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<long> _EmployeeId;
	
	private System.Nullable<long> _TaskId;
	
	private System.Nullable<long> _ProjectId;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<Project> _Project;
	
	private EntityRef<Task> _Task;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskCommentIdChanging(long value);
    partial void OnTaskCommentIdChanged();
    partial void OnCommentTitleChanging(string value);
    partial void OnCommentTitleChanged();
    partial void OnCommentNoteChanging(string value);
    partial void OnCommentNoteChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnEmployeeIdChanging(System.Nullable<long> value);
    partial void OnEmployeeIdChanged();
    partial void OnTaskIdChanging(System.Nullable<long> value);
    partial void OnTaskIdChanged();
    partial void OnProjectIdChanging(System.Nullable<long> value);
    partial void OnProjectIdChanged();
    #endregion
	
	public TaskComment()
	{
		this._Employee = default(EntityRef<Employee>);
		this._Project = default(EntityRef<Project>);
		this._Task = default(EntityRef<Task>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskCommentId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long TaskCommentId
	{
		get
		{
			return this._TaskCommentId;
		}
		set
		{
			if ((this._TaskCommentId != value))
			{
				this.OnTaskCommentIdChanging(value);
				this.SendPropertyChanging();
				this._TaskCommentId = value;
				this.SendPropertyChanged("TaskCommentId");
				this.OnTaskCommentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentTitle", DbType="NVarChar(120)")]
	public string CommentTitle
	{
		get
		{
			return this._CommentTitle;
		}
		set
		{
			if ((this._CommentTitle != value))
			{
				this.OnCommentTitleChanging(value);
				this.SendPropertyChanging();
				this._CommentTitle = value;
				this.SendPropertyChanged("CommentTitle");
				this.OnCommentTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentNote", DbType="NVarChar(MAX)")]
	public string CommentNote
	{
		get
		{
			return this._CommentNote;
		}
		set
		{
			if ((this._CommentNote != value))
			{
				this.OnCommentNoteChanging(value);
				this.SendPropertyChanging();
				this._CommentNote = value;
				this.SendPropertyChanged("CommentNote");
				this.OnCommentNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="BigInt")]
	public System.Nullable<long> EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskId", DbType="BigInt")]
	public System.Nullable<long> TaskId
	{
		get
		{
			return this._TaskId;
		}
		set
		{
			if ((this._TaskId != value))
			{
				if (this._Task.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTaskIdChanging(value);
				this.SendPropertyChanging();
				this._TaskId = value;
				this.SendPropertyChanged("TaskId");
				this.OnTaskIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt")]
	public System.Nullable<long> ProjectId
	{
		get
		{
			return this._ProjectId;
		}
		set
		{
			if ((this._ProjectId != value))
			{
				if (this._Project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProjectIdChanging(value);
				this.SendPropertyChanging();
				this._ProjectId = value;
				this.SendPropertyChanged("ProjectId");
				this.OnProjectIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_TaskComment", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.TaskComments.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.TaskComments.Add(this);
					this._EmployeeId = value.EmployeeId;
				}
				else
				{
					this._EmployeeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaskComment", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.TaskComments.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.TaskComments.Add(this);
					this._ProjectId = value.ProjectId;
				}
				else
				{
					this._ProjectId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskComment", Storage="_Task", ThisKey="TaskId", OtherKey="TaskId", IsForeignKey=true)]
	public Task Task
	{
		get
		{
			return this._Task.Entity;
		}
		set
		{
			Task previousValue = this._Task.Entity;
			if (((previousValue != value) 
						|| (this._Task.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Task.Entity = null;
					previousValue.TaskComments.Remove(this);
				}
				this._Task.Entity = value;
				if ((value != null))
				{
					value.TaskComments.Add(this);
					this._TaskId = value.TaskId;
				}
				else
				{
					this._TaskId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Task");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkingLocation")]
public partial class WorkingLocation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _WorkingLocationId;
	
	private long _EmployeeId;
	
	private System.Nullable<int> _DepartmentId;
	
	private System.Nullable<long> _CompanyId;
	
	private string _Status;
	
	private System.Nullable<System.DateTime> _StartWorkingDate;
	
	private System.Nullable<System.DateTime> _FinishWorkingDate;
	
	private EntitySet<Attendant> _Attendants;
	
	private EntityRef<Company> _Company;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkingLocationIdChanging(long value);
    partial void OnWorkingLocationIdChanged();
    partial void OnEmployeeIdChanging(long value);
    partial void OnEmployeeIdChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnStartWorkingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartWorkingDateChanged();
    partial void OnFinishWorkingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishWorkingDateChanged();
    #endregion
	
	public WorkingLocation()
	{
		this._Attendants = new EntitySet<Attendant>(new Action<Attendant>(this.attach_Attendants), new Action<Attendant>(this.detach_Attendants));
		this._Company = default(EntityRef<Company>);
		this._Department = default(EntityRef<Department>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingLocationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long WorkingLocationId
	{
		get
		{
			return this._WorkingLocationId;
		}
		set
		{
			if ((this._WorkingLocationId != value))
			{
				this.OnWorkingLocationIdChanging(value);
				this.SendPropertyChanging();
				this._WorkingLocationId = value;
				this.SendPropertyChanged("WorkingLocationId");
				this.OnWorkingLocationIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="BigInt NOT NULL")]
	public long EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int")]
	public System.Nullable<int> DepartmentId
	{
		get
		{
			return this._DepartmentId;
		}
		set
		{
			if ((this._DepartmentId != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIdChanging(value);
				this.SendPropertyChanging();
				this._DepartmentId = value;
				this.SendPropertyChanged("DepartmentId");
				this.OnDepartmentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
	public System.Nullable<long> CompanyId
	{
		get
		{
			return this._CompanyId;
		}
		set
		{
			if ((this._CompanyId != value))
			{
				if (this._Company.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCompanyIdChanging(value);
				this.SendPropertyChanging();
				this._CompanyId = value;
				this.SendPropertyChanged("CompanyId");
				this.OnCompanyIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartWorkingDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartWorkingDate
	{
		get
		{
			return this._StartWorkingDate;
		}
		set
		{
			if ((this._StartWorkingDate != value))
			{
				this.OnStartWorkingDateChanging(value);
				this.SendPropertyChanging();
				this._StartWorkingDate = value;
				this.SendPropertyChanged("StartWorkingDate");
				this.OnStartWorkingDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishWorkingDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> FinishWorkingDate
	{
		get
		{
			return this._FinishWorkingDate;
		}
		set
		{
			if ((this._FinishWorkingDate != value))
			{
				this.OnFinishWorkingDateChanging(value);
				this.SendPropertyChanging();
				this._FinishWorkingDate = value;
				this.SendPropertyChanged("FinishWorkingDate");
				this.OnFinishWorkingDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkingLocation_Attendant", Storage="_Attendants", ThisKey="WorkingLocationId", OtherKey="WorkingLocationId")]
	public EntitySet<Attendant> Attendants
	{
		get
		{
			return this._Attendants;
		}
		set
		{
			this._Attendants.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_WorkingLocation", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
	public Company Company
	{
		get
		{
			return this._Company.Entity;
		}
		set
		{
			Company previousValue = this._Company.Entity;
			if (((previousValue != value) 
						|| (this._Company.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Company.Entity = null;
					previousValue.WorkingLocations.Remove(this);
				}
				this._Company.Entity = value;
				if ((value != null))
				{
					value.WorkingLocations.Add(this);
					this._CompanyId = value.CompanyId;
				}
				else
				{
					this._CompanyId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Company");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_WorkingLocation", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.WorkingLocations.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.WorkingLocations.Add(this);
					this._DepartmentId = value.DepartmentId;
				}
				else
				{
					this._DepartmentId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkingLocation", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.WorkingLocations.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.WorkingLocations.Add(this);
					this._EmployeeId = value.EmployeeId;
				}
				else
				{
					this._EmployeeId = default(long);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Attendants(Attendant entity)
	{
		this.SendPropertyChanging();
		entity.WorkingLocation = this;
	}
	
	private void detach_Attendants(Attendant entity)
	{
		this.SendPropertyChanging();
		entity.WorkingLocation = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogComment")]
public partial class BlogComment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _BlogCommentId;
	
	private string _CommentTitle;
	
	private string _CommentNote;
	
	private System.Nullable<System.DateTime> _CreatedDate;
	
	private System.Nullable<long> _EmployeeId;
	
	private System.Nullable<int> _Status;
	
	private System.Nullable<long> _BlogId;
	
	private EntityRef<Blog> _Blog;
	
	private EntityRef<Employee> _Employee;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBlogCommentIdChanging(long value);
    partial void OnBlogCommentIdChanged();
    partial void OnCommentTitleChanging(string value);
    partial void OnCommentTitleChanged();
    partial void OnCommentNoteChanging(string value);
    partial void OnCommentNoteChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnEmployeeIdChanging(System.Nullable<long> value);
    partial void OnEmployeeIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnBlogIdChanging(System.Nullable<long> value);
    partial void OnBlogIdChanged();
    #endregion
	
	public BlogComment()
	{
		this._Blog = default(EntityRef<Blog>);
		this._Employee = default(EntityRef<Employee>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogCommentId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long BlogCommentId
	{
		get
		{
			return this._BlogCommentId;
		}
		set
		{
			if ((this._BlogCommentId != value))
			{
				this.OnBlogCommentIdChanging(value);
				this.SendPropertyChanging();
				this._BlogCommentId = value;
				this.SendPropertyChanged("BlogCommentId");
				this.OnBlogCommentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentTitle", DbType="NVarChar(150)")]
	public string CommentTitle
	{
		get
		{
			return this._CommentTitle;
		}
		set
		{
			if ((this._CommentTitle != value))
			{
				this.OnCommentTitleChanging(value);
				this.SendPropertyChanging();
				this._CommentTitle = value;
				this.SendPropertyChanged("CommentTitle");
				this.OnCommentTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentNote", DbType="NVarChar(MAX)")]
	public string CommentNote
	{
		get
		{
			return this._CommentNote;
		}
		set
		{
			if ((this._CommentNote != value))
			{
				this.OnCommentNoteChanging(value);
				this.SendPropertyChanging();
				this._CommentNote = value;
				this.SendPropertyChanged("CommentNote");
				this.OnCommentNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> CreatedDate
	{
		get
		{
			return this._CreatedDate;
		}
		set
		{
			if ((this._CreatedDate != value))
			{
				this.OnCreatedDateChanging(value);
				this.SendPropertyChanging();
				this._CreatedDate = value;
				this.SendPropertyChanged("CreatedDate");
				this.OnCreatedDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="BigInt")]
	public System.Nullable<long> EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
	public System.Nullable<int> Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogId", DbType="BigInt")]
	public System.Nullable<long> BlogId
	{
		get
		{
			return this._BlogId;
		}
		set
		{
			if ((this._BlogId != value))
			{
				if (this._Blog.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBlogIdChanging(value);
				this.SendPropertyChanging();
				this._BlogId = value;
				this.SendPropertyChanged("BlogId");
				this.OnBlogIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogComment", Storage="_Blog", ThisKey="BlogId", OtherKey="BlogId", IsForeignKey=true)]
	public Blog Blog
	{
		get
		{
			return this._Blog.Entity;
		}
		set
		{
			Blog previousValue = this._Blog.Entity;
			if (((previousValue != value) 
						|| (this._Blog.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Blog.Entity = null;
					previousValue.BlogComments.Remove(this);
				}
				this._Blog.Entity = value;
				if ((value != null))
				{
					value.BlogComments.Add(this);
					this._BlogId = value.BlogId;
				}
				else
				{
					this._BlogId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Blog");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BlogComment", Storage="_Employee", ThisKey="EmployeeId", OtherKey="EmployeeId", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.BlogComments.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.BlogComments.Add(this);
					this._EmployeeId = value.EmployeeId;
				}
				else
				{
					this._EmployeeId = default(Nullable<long>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
